// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// MoneytreeClient is the client API for Moneytree service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MoneytreeClient interface {
	// Places an order pair in the system using the current price as the starting point.
	PlacePair(ctx context.Context, in *PlacePairRequest, opts ...grpc.CallOption) (*PlacePairResponse, error)
	GetOpenPairs(ctx context.Context, in *NullRequest, opts ...grpc.CallOption) (*PairCollection, error)
	GetCandles(ctx context.Context, in *GetCandlesRequest, opts ...grpc.CallOption) (*CandleCollection, error)
	RefreshPair(ctx context.Context, in *PairRequest, opts ...grpc.CallOption) (*Pair, error)
}

type moneytreeClient struct {
	cc grpc.ClientConnInterface
}

func NewMoneytreeClient(cc grpc.ClientConnInterface) MoneytreeClient {
	return &moneytreeClient{cc}
}

func (c *moneytreeClient) PlacePair(ctx context.Context, in *PlacePairRequest, opts ...grpc.CallOption) (*PlacePairResponse, error) {
	out := new(PlacePairResponse)
	err := c.cc.Invoke(ctx, "/moneytree.Moneytree/PlacePair", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moneytreeClient) GetOpenPairs(ctx context.Context, in *NullRequest, opts ...grpc.CallOption) (*PairCollection, error) {
	out := new(PairCollection)
	err := c.cc.Invoke(ctx, "/moneytree.Moneytree/GetOpenPairs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moneytreeClient) GetCandles(ctx context.Context, in *GetCandlesRequest, opts ...grpc.CallOption) (*CandleCollection, error) {
	out := new(CandleCollection)
	err := c.cc.Invoke(ctx, "/moneytree.Moneytree/GetCandles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moneytreeClient) RefreshPair(ctx context.Context, in *PairRequest, opts ...grpc.CallOption) (*Pair, error) {
	out := new(Pair)
	err := c.cc.Invoke(ctx, "/moneytree.Moneytree/RefreshPair", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MoneytreeServer is the server API for Moneytree service.
// All implementations must embed UnimplementedMoneytreeServer
// for forward compatibility
type MoneytreeServer interface {
	// Places an order pair in the system using the current price as the starting point.
	PlacePair(context.Context, *PlacePairRequest) (*PlacePairResponse, error)
	GetOpenPairs(context.Context, *NullRequest) (*PairCollection, error)
	GetCandles(context.Context, *GetCandlesRequest) (*CandleCollection, error)
	RefreshPair(context.Context, *PairRequest) (*Pair, error)
	mustEmbedUnimplementedMoneytreeServer()
}

// UnimplementedMoneytreeServer must be embedded to have forward compatible implementations.
type UnimplementedMoneytreeServer struct {
}

func (UnimplementedMoneytreeServer) PlacePair(context.Context, *PlacePairRequest) (*PlacePairResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlacePair not implemented")
}
func (UnimplementedMoneytreeServer) GetOpenPairs(context.Context, *NullRequest) (*PairCollection, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOpenPairs not implemented")
}
func (UnimplementedMoneytreeServer) GetCandles(context.Context, *GetCandlesRequest) (*CandleCollection, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCandles not implemented")
}
func (UnimplementedMoneytreeServer) RefreshPair(context.Context, *PairRequest) (*Pair, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshPair not implemented")
}
func (UnimplementedMoneytreeServer) mustEmbedUnimplementedMoneytreeServer() {}

// UnsafeMoneytreeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MoneytreeServer will
// result in compilation errors.
type UnsafeMoneytreeServer interface {
	mustEmbedUnimplementedMoneytreeServer()
}

func RegisterMoneytreeServer(s grpc.ServiceRegistrar, srv MoneytreeServer) {
	s.RegisterService(&_Moneytree_serviceDesc, srv)
}

func _Moneytree_PlacePair_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlacePairRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoneytreeServer).PlacePair(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moneytree.Moneytree/PlacePair",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoneytreeServer).PlacePair(ctx, req.(*PlacePairRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Moneytree_GetOpenPairs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NullRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoneytreeServer).GetOpenPairs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moneytree.Moneytree/GetOpenPairs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoneytreeServer).GetOpenPairs(ctx, req.(*NullRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Moneytree_GetCandles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCandlesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoneytreeServer).GetCandles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moneytree.Moneytree/GetCandles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoneytreeServer).GetCandles(ctx, req.(*GetCandlesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Moneytree_RefreshPair_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PairRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoneytreeServer).RefreshPair(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moneytree.Moneytree/RefreshPair",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoneytreeServer).RefreshPair(ctx, req.(*PairRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Moneytree_serviceDesc = grpc.ServiceDesc{
	ServiceName: "moneytree.Moneytree",
	HandlerType: (*MoneytreeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PlacePair",
			Handler:    _Moneytree_PlacePair_Handler,
		},
		{
			MethodName: "GetOpenPairs",
			Handler:    _Moneytree_GetOpenPairs_Handler,
		},
		{
			MethodName: "GetCandles",
			Handler:    _Moneytree_GetCandles_Handler,
		},
		{
			MethodName: "RefreshPair",
			Handler:    _Moneytree_RefreshPair_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/moneytree.proto",
}
